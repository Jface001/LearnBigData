package com.test.offer;

/**
 * @Author: Jface
 * @Date: 2021/7/27 20:26
 * @Desc:
 * 题目:
 * 给定一个数组A[0, 1, ..., n-1],请构建一个数组B[0,1,...,n-1]其中B中的元素B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]。不能使用除法。（注意：规定B[0] = A[1] * A[2] * ... * A[n-1]，B[n-1] = A[0] * A[1] * ... * A[n-2];）
 * 对于A长度为1的情况，B无意义，故而无法构建，因此该情况不会存在。
 * 数组A：有n个元素的递增数组，递增范围：0-n-1
 * 数组B：看重点：B[i]= A[0]A[1]A[2]……A[i-1]A[i+1]A[n-1],也就是说数组B的第i个元素的值为A数组除A[i]以外的累乘积和
 * 思路1：可以求总的乘积除以当前的A[i]，但是题目规定不能用除法
 * 思路2：将A[i]的值设置为1,这样的话，再累乘也不影响最后结果，也满足题意
 */

public class JZ51 {

    public int[] multiply(int[] A) {
        int[] B = new int[A.length];
        if (A.length <= 1 || A == null) {
            return null;
        }
        //求左边乘积和,i+1的乘积和应该是i的乘积和,乘以A[i],这么计算可以节省效率
        B[0] = 1;
        for (int i = 1; i <= A.length - 1; i++) {
            B[i] = B[i - 1] * A[i - 1];
        }
        //求右边的乘积和.
        int tmp = 1;
        for (int i = A.length - 1; i >= 0; i--) {
            B[i] *= tmp;//B[i]的位置不参与乘积, 我们赋值1,相当于不参与计算
            tmp *= A[i];//把tmp当成临时存储点,同样节省效率,计算过的乘积不需要再计算一次.

        }

        return B;
    }
}
